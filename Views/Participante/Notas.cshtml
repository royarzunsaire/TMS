@model SGC.Models.Comercializacion
@using SGC.Models
@{
    string action = Convert.ToString(ViewContext.RouteData.Values["Action"]);
    ViewBag.Title = "Calificaciones Participantes";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var count = new List<int>();
    Model.evaluaciones.ToList().ForEach(x => count.Add(0));
    int i = 0;
    string idEvaluacion = "0";
    Evaluacion evaluacionFinal = Model.evaluaciones.FirstOrDefault(e => e.nombre.ToLower().Contains("final"));

    if (evaluacionFinal != null)
    {
        idEvaluacion = evaluacionFinal.idQuizMoodle;
    }
}

<div class="page-title" style="margin-bottom: 0">
    <div class="row">
        <div class="col-md-12">
            Administrar Participantes
        </div>
        <div class="col-md-4">
            <small>Curso: @Model.cotizacion.curso.nombreCurso</small>
        </div>
        <div class="col-md-4">
            <small>Comercialización: @Model.cotizacion.codigoCotizacion</small>
        </div>
    </div>
</div>

<div class="portlet light bordered">
    <div class="portlet-title">
        <div class="caption">
            Calificaciones
        </div>
        <div class="tools">
            <a href="javascript:;" class="collapse"> </a>
            <a href="javascript:;" class="fullscreen"> </a>
        </div>
        <div class="actions">
            <div class="inputs pull-right">
                <a id="btnActualizarEvaluaciones" class="btn btn-sm btn-default">Actualizar Evaluaciones</a>
                <a href="@Url.Action("IngresarNotas", "Evaluacion", new { id = Model.idComercializacion }) " class="btn btn-sm btn-default">
                    Ingresar Notas
                </a>
                <a href="@Url.Action("ObtenerNotas", new { id = Model.idComercializacion }) " class="btn btn-sm btn-default">
                    Obtener Notas Moodle
                </a>
                <a id="btnObtenerNotasAtrasadas" class="btn btn-sm btn-default">Obtener Notas Atrasadas</a>
            </div>
        </div>
    </div>
    <div class="portlet-body">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <table class="table table-striped table-bordered table-hover dt-responsive" id="sys-table-participantes-notas" cellspacing="0">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayName("Participante")
                    </th>
                    <th>
                        @Html.DisplayName("RUN")
                    </th>
                    @foreach (var item in Model.evaluaciones)
                    {
                        <th title="@Html.DisplayFor(modelItem => item.nombre)">
                            @Html.DisplayFor(modelItem => item.nombre)
                        </th>
                        if (item.nombre.ToLower().Contains("final"))
                        {
                            <th>
                                @Html.DisplayName("Fecha de Realización")
                            </th>
                            <th>
                                @Html.DisplayName("Recuperado por")
                            </th>
                            <th>
                                @Html.DisplayName("Intentos")
                            </th>
                        }
                    }
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.participantes.OrderBy(x => x.contacto.nombreCompleto))
                {
                    int totalAttempt = item.attempts.Count();
                    int attempt = item.attemptsQuizUsers.Count() == 0 ? 1 : item.attemptsQuizUsers.FirstOrDefault().attempt;
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.contacto.nombreCompleto)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.contacto.run)
                        </td>
                        @{i = 0; }
                        @foreach (var nota in Model.evaluaciones)
                        {
                            <td class="text-center">
                                @if (item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault() != null)
                                {
                                    @item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault().nota
                                    if (item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault().nota != "-")
                                    {
                                        count[i] = count[i] + 1;
                                    }
                                }
                                else
                                {
                                    <label>-</label>
                                    if (nota.nombre.ToLower().Contains("final"))
                                    {
                                    <td>
                                        <label> Sin fecha de realización </label>
                                    </td>
                                    <td>
                                        <label> - </label>
                                    </td>
                                    <td>
                                        <label> - </label>
                                    </td>
                                }
                            }
                                @{ i = i + 1;}
                                </td>
                                if (item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault() != null && nota.nombre.ToLower().Contains("final"))
                                {
                                    var notaFinal = item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault();
                                    if (@item.notas.Count() > 0)
                                    {
                                        if (DateTime.Compare(@item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault().fechaRealizacion, new DateTime(1990, 1, 1)) <= 0)
                                        {
                                            <td>
                                                <label>Sin fecha de realización</label>
                                            </td>
                                        }
                                        else if ((DateTime.Compare(notaFinal.fechaRealizacion.Date, Model.fechaInicio.Date) < 0 || DateTime.Compare(notaFinal.fechaRealizacion.Date, Model.fechaTermino.AddDays(1).Date) >= 0))
                                        {
                                            <td>
                                                <label style="color:red;"> Realizada el  </label>
                                                <label style="color:red;">  @item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault().fechaRealizacion </label>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                @item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault().fechaRealizacion
                                            </td>
                                        }
                                        <td>
                                            @{
                                                //var ingresado = item.notas.Where(p => p.evaluacion.idEvaluacion == nota.idEvaluacion).FirstOrDefault();
                                                var text = "Sistema";
                                                if (notaFinal.usuarioIngreso != null)
                                                {
                                                    text = notaFinal.usuarioIngreso.nombreCompleto;
                                                }
                                                if (notaFinal.manual)
                                                {
                                                    text += " manualmente";
                                                }
                                                else
                                                {
                                                    text += " mediante Moodle";
                                                }

                                            }
                                            <label> @text  </label>
                                        </td>
                                        <td>
                                            @totalAttempt / @attempt
                                            @if (item.attempts.Count() > 0)
                                            {
                                                @Html.ActionLink(" ", "AgregarIntento", "Participante", new { idUsuarioMoodle = item.contacto.idUsuarioMoodle, idEvaluacion = idEvaluacion, idComercializacion = Model.idComercializacion, accion = action }, htmlAttributes: new { @class = "btn btn-default btn-sm glyphicon glyphicon-plus", @datatoggle = "tooltip", @title = "Agregar un intento" })
                                            }
                                        </td>
                                    }
                                    else
                                    {
                                        <td>
                                            <label>Sin fecha de realización</label>
                                        </td>
                                    }
                                }
                            }

                        <td class="text-center">
                            @Html.ActionLink(" ", "EvaluacionesParticipante", "Evaluacion", new { id = item.idParticipante, id2 = Model.idComercializacion }, htmlAttributes: new { @class = "btn btn-default btn-sm glyphicon glyphicon-list", @datatoggle = "tooltip", @title = "Detalles" })
                        </td>
                    </tr>
                }
                <tr>
                    <th class="text-center">Total </th>
                    <th class="text-center">@Model.participantes.Count() participantes </th>
                    @{
                        i = 0;
                    }
                    @foreach (var item in count)
                    {
                        int col = @Model.evaluaciones.ElementAt(i).nombre.ToLower().Contains("final") ? 2 : 1;
                        <th class="text-center" colspan="@col">@item / @Model.participantes.Count() </th>
                        i = i + 1;
                    }
                </tr>
            </tbody>
        </table>
        <div id="modalConfirmarActualizarEvaluaciones" class="modal fade draggable-modal modalx" tabindex="-1" role="alertdialog" aria-hidden="true">
            <div class="modal-dialog">
                <div id="modal-content" class="modal-content">
                    <div class="modal-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h4 class="modal-title">Confirmar</h4>
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-body text-center">
                        <p>¿Está seguro(a) que desea actualizar las evaluaciones?</p>
                    </div>
                    <div class="modal-footer">
                        <a href="@Url.Action("ActualizarEvaluaciones", new { id = Model.idComercializacion, returnalUrl = "Notas" })  " id="btnConfirmar" class="btn btn-primary">
                            Aceptar
                        </a>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="modalConfirmarObtenerNotasAtrasadas" class="modal fade draggable-modal modalx" tabindex="-1" role="alertdialog" aria-hidden="true">
            <div class="modal-dialog">
                <div id="modal-content" class="modal-content">
                    <div class="modal-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h4 class="modal-title">Confirmar</h4>
                            </div>
                            <div class="col-md-6">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-body text-center">
                        <p>¿Está seguro(a) que desea obtener las notas de Moodle atrasadas?</p>
                    </div>
                    <div class="modal-footer">
                        <a href="@Url.Action("ObtenerNotasAtrasadas", new { id = Model.idComercializacion }) " id="btnConfirmar" class="btn btn-primary">
                            Aceptar
                        </a>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>
        @Html.ActionLink("Volver", "List", new { id = Model.idComercializacion }, new { @class = "btn btn-default" })
    </div>
</div>

@section Scripts {
    <script>
        $("#btnActualizarEvaluaciones").click(function () {
            $('#modalConfirmarActualizarEvaluaciones').modal({ keyboard: true }, 'show');
        });

        $("#btnObtenerNotasAtrasadas").click(function () {
            $('#modalConfirmarObtenerNotasAtrasadas').modal({ keyboard: true }, 'show');
        });
        $("#btnConfirmar").click(function () {
            $("#btnConfirmar").prop("disabled", true)
        });
    </script>
}   