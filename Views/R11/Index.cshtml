@using SGC.Helpers

@model SGC.Models.ViewModelR11

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    ViewBag.Title = "Index";
}

<h3 class="page-title">
    Administracion R11
</h3>
<div class="row">
    <div class="col-md-12">
        <div class="portlet box blue">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-folder"></i>Solicitudes R51
                </div>
                <div class="tools">
                    <a href="javascript:;" class="collapse"> </a>
                    <a href="javascript:;" class="fullscreen"> </a>
                </div>
                <div class="actions">
                    <div class="inputs pull-right">
                        @using (Html.BeginForm())
                        {
                            <div class="portlet-input input-inline input-medium">
                                <div class="input-group">
                                    @Html.TextBox("Buscar", null, new { @class = "form-control input-circle-left", @placeholder = "Buscar", @title = "Buscar" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-circle-right btn-default" type="submit"><i class="fa fa-search"></i></button>
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="portlet-body">
                <table  class="table table-striped table-bordered table-hover dt-responsive dataTable"  id="sys-table" cellspacing="0">
                    <thead>
                        <tr>
                            <th>
                                Nombre Curso
                            </th>
                            <th width="20%">
                                Fecha Creacion
                            </th>
                            <th width="20%">
                                Codigo
                            </th>
                            <th width="5%">
                                R51
                            </th>
                            <th width="15%">
                                R11
                            </th>
                            <th width="10%">
                                Codigo Sence
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.r51)
                        {
                        <tr>

                            <td>
                                @Html.DisplayFor(modelItem => item.nombreCurso)
                            </td>
                            <td data-sort="@item.fechaCreacion.ToString("MM/dd/yyyy")">
                                @Html.DisplayFor(modelItem => item.fechaCreacion)
                            </td>

                            <td>
                                @Html.DisplayFor(modelItem => Model.curso.Where(x => x.idCurso == item.idCurso).First().codigoCurso)
                            </td>

                            <!-- hacer que si existe ya el r11 se pueda editar-->
                            <td>
                                @Html.ActionLink("Editar", "Edit", "R51", new { id = item.idR51 }, new { @class = "btn btn-primary" })
                            </td>
                            <td>

                                @if (Model.r11.Where(x => x.idCurso == item.idCurso).Count() == 0)
                                {
                                    @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-plus'></span>", "Crear", "Create", "R11", routeValues: new { id = item.idCurso }, htmlAttributes: new { @class = "btn btn-default btn-sm" })

                                }
                                else
                                {
                                    using (Html.BeginForm("Delete", "R11", FormMethod.Post, new { @id = "notificationForm_" + Model.r11.Where(x => x.idCurso == item.idCurso).First().idR11 }))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.ActionLink(" ", "CreateWord", "R11", new { id = @Model.r11.Where(x => x.idCurso == item.idCurso).First().idR11 }, new { @class = "btn btn-sm btn-default glyphicon glyphicon-cloud-download" })

                                        @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-list-alt'></span>", "Detalles", "Details", "R11", new { id = Model.r11.Where(x => x.idCurso == item.idCurso).First().idR11 }, htmlAttributes: new { @class = "btn btn-default btn-sm" })
                                        @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-pencil'></span>", "Editar", "Edit", "R11", routeValues: new { id = Model.r11.Where(x => x.idCurso == item.idCurso).First().idR11 }, htmlAttributes: new { @class = "btn btn-default btn-sm" })
                                        <a class="btn btn-danger btn-sm" href="javascript:confirmDelete('Delete','@Model.r11.Where(x => x.idCurso == item.idCurso).First().idR11','R11')"><span class='glyphicon glyphicon-trash'></span></a>
                                    }
                                }


                            </td>
                            <td>
                                @if (Model.r11.Where(x => x.idCurso == item.idCurso).Count() > 0 && Model.r11.Where(x => x.idCurso == item.idCurso).First().codigoSence != null)
                                {
                                    <!-- @Html.DisplayFor(modelItem => Model.r11.Where(x => x.idCurso == item.idCurso).First().codigoSence)-->
                                    <button data-toggle="modal" data-target="#myModal" data-myvalue="El curso seleccionado se realizara con franquicia SENCE COD: " data-bb=@Model.r11.Where(x => x.idCurso == item.idCurso).First().codigoSence class="btn btn-primary">SENCE</button>

                                }
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Codigo Sence</h4>
                </div>
                <div class="modal-body">
                    <span id="modal-myvalue"></span> <span id="modal-myvar"></span> <span id="modal-bb"></span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@section Scripts{

    <script src="/Content/plugins/datatables/datatables.js" type="text/javascript"></script>
    <script src="/Content/plugins/datatables/datatables.min.js" type="text/javascript"></script>
    <script src="/Content/plugins/datatables/plugins/bootstrap/datatables.bootstrap.js" type="text/javascript"></script>


}
<script>
    // data-* attributes to scan when populating modal values
    var ATTRIBUTES = ['myvalue', 'myvar', 'bb'];

    $('[data-toggle="modal"]').on('click', function (e) {
        // convert target (e.g. the button) to jquery object
        var $target = $(e.target);
        // modal targeted by the button
        var modalSelector = $target.data('target');

        // iterate over each possible data-* attribute
        ATTRIBUTES.forEach(function (attributeName) {
            // retrieve the dom element corresponding to current attribute
            var $modalAttribute = $(modalSelector + ' #modal-' + attributeName);
            var dataValue = $target.data(attributeName);

            // if the attribute value is empty, $target.data() will return undefined.
            // In JS boolean expressions return operands and are not coerced into
            // booleans. That way is dataValue is undefined, the left part of the following
            // Boolean expression evaluate to false and the empty string will be returned
            $modalAttribute.text(dataValue || '');
        });
    });
</script>
@section topLevel{
    @{Html.RenderPartial("_RenderConfirm.Modal"); }
}